import os

from azure.cognitiveservices.vision.computervision import ComputerVisionClient
from dotenv import load_dotenv
from msrest.authentication import CognitiveServicesCredentials


def get_azure_client():
    """
    Generates a client for azure services
    :return: client
    """
    load_dotenv()
    # Access the credentials using environment variables
    endpoint = os.getenv("ENDPOINT")
    key = os.getenv("KEY")
    credentials = CognitiveServicesCredentials(key)
    client = ComputerVisionClient(
        endpoint=endpoint,
        credentials=credentials
    )
    return client


def generate_alt_text(image_path):
    """
    Generate alt text for an image using Azure Computer Vision API.

    Args:
        image_path (str): Local path to the image or URL to the image.

    Returns:
        str: Alt text generated by the API.
    """
    computer_vision_client = get_azure_client()
    try:
        # Check if it's a URL or local path
        if image_path.startswith("http"):
            description_results = computer_vision_client.describe_image(image_path)
        else:
            with open(image_path, "rb") as image_file:
                description_results = computer_vision_client.describe_image_in_stream(image_file)

        # Extract and return the description (alt text)
        if description_results.captions:
            return description_results.captions[0].text
        else:
            return "No description available for this image."
    except Exception as e:
        return f"Error generating alt text: {str(e)}"


def get_tags(image_path):
    """
    Generate tags for an image using Azure Computer Vision API.
    :param image_path: image path or URL to the image.
    :return: tags generated by the API.
    """
    computer_vision_client = get_azure_client()
    try:
        # Check if it's a URL or local path
        if image_path.startswith("http"):
            description_results = computer_vision_client.analyze_image(image_path,
                                                                       visual_features=["Objects"])
        else:
            with open(image_path, "rb") as image_file:
                response = computer_vision_client.analyze_image_in_stream(image_file,
                                                                          visual_features=[
                                                                              "Objects"])
        # Extract and return the description (alt text)
        result = set()
        if response.objects:
            for obj in response.objects:
                if obj.confidence > 0.5:
                    result.add(obj.object_property)
        return list(result)
    except Exception as e:
        return f"Error generating alt text: {str(e)}"
